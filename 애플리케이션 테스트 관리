애플리케이션에 잠재되어 있는 결함을 찾아내는 일련의 행위 또는 절차이다. 잠재적인 결함을 줄일 수 있지만 완벽한 소프트웨어 테스팅은 불가능하다.

프로그램의 실행 여부에 따라서 정적 테스트, 동적 테스트로 나뉘는데 동적 테스트에서 화이트박스 테스트와 블랙박스 테스트를 알아보고 개발단계 마다의 테스트를 배운 후에 통합 테스트까지 보자

테스트 기법에 따른 애플리케이션 테스트
개발 단계에 따른 애플리케이션 테스트
통합 테스트
1.테스트 기법에 따른 애플리케이션 테스트
화이트 박스 (투명한 박스, 모듈 안의 내용을 볼 수 있어서 내부의 ‘논리’적인 경로를 테스트) // 블랙 박스 (안을 볼 수 없는 박스, 각 기능이 작동이 되는지 안 되는지 입증하는 테스트로 ‘기능 테스트’라고 한다.)

(1) 화이트박스 테스트의 종류

기초 경로 검사

– 대표적인 화이트박스 테스트 기법이다.

– 기초 경로 테스트의 측정 결과는 실행 경로의 기초를 정의하는 데 지침으로 사용된다.

제어구조 검사

-데이터 흐름 검사: 변수의 정의와 변수 사용의 위치에 초점을 맞춰 실시하는 테스트 케이스 설계 기법

-조건 검사: 모듈 내에 있는 ‘논리적 조건’을 테스트하는 테스트 케이스 설계 기법

-루프 검사: ‘반속 구조’에 초점을 맞춰 실시하는 테스트 케이스 설계 기법

(2) 블랙박스 테스트의 종류

동치분할 검사 (입력자료에 초점을 맞춤)

Input을 ‘타당한 입력자료’와 ‘타당하지 않은 입력자료’의 개수를 균등하게 하여 테스트 케이스를 정하고 해당 입력자료에 맞는 결과가 출력되는지 확인하는 기법이다.

경계값 분석 (동치분할 검사를 보완하기 위한 기법)

입력 조건의 경계값을 테스트 케이스로 선정하여 검사하는 기법이다.

원인-효과 그래프 검사 (데이터 간의 관계)

입력 데이터 간의 관계와 출력에 영향을 미치는 상황을 체계적으로 분석한 다음 효용성이 높은 테스트 케이스를 선정하여 검사하는 기법이다.

오류 예측 검사 (경험이나 감각으로 테스트)

블랙박스 테스트로는 찾아낼 수 없는 오류를 찾아내는 보충적 검사 기법이며 데이터확인 검사라고도 한다.

비교 검사 (출력 중심)

여러 버전의 프로그램에 동일한 테스트 자료를 제공하여 동일한 결과가 출력되는지 테스트하는 기법이다.

2. 개발단계에 따른 애플리케이션 테스트
소프트웨어 생명주기는 두 개의 면으로 구분된다.

소프트웨어 개발 단계

요구사항
분석
설계
구현
테스트 단계

단위 테스트
통합 테스트
시스템 테스트
인수 테스트
(1) 단위 테스트

코딩 직후 소프트웨어 설계의 최소 단위인 모듈이나 컴포넌트에 초점을 맞춰 테스트하는 것이다.

-사용자의 요구사항을 기반으로 한 기능성 테스트를 최우선으로 한다.

(2) 통합 테스트

단위 테스트가 완료된 모듈들을 결합하여 하나의 시스템으로 완성시키는 과정에서의 테스트를 의미한다.

-모듈 간 or 통합된 컴포넌트 간의 상호 작용 오류를 검사한다.

(3) 시스템 테스트

개발된 소프트웨어가 해당 컴퓨터 시스템에서 완벽하게 수행되는가를 점검하는 테스트이다.

(4) 인수 테스트

개발한 소프트웨어가 사용자의 요구사항을 충족하는지에 중점을 두고 테스트하는 방법이다.

3. 통합 테스트
단위 테스트가 끝난 모듈을 통합하는 과정에서 발생하는 오류 및 결함을 찾는 테스트 기법이다. 크게 하향식과 상향식 통합 데스트를 살펴보자!

(1) 하향식 통합 테스트 (Top Down, 상위 모듈에서 하위 모듈 방향으로 통합)

— 주요 제어 모듈은 작성된 프로그램을 사용하고, 주요 제어 모듈에 종속된 모듈들은 스텁(시험용 모듈)으로 대체한다.

=>> 하위 모듈인 스텁들을 한 번에 하나씩 실제 모듈로 교체하면서 통합한다.

=>> 모듈이 통합될 때마다 테스트를 실시한다.

=>> 새로운 오류가 발생하지 않음을 보증하기 위해 회귀 테스트(이미 테스트된 프로그램의 테스팅을 반복하는 것)를 실시한다.

(2) 상향식 통합 테스트 (Bottom Up, 하위 모듈에서 상위 모듈 방향으로 통합)

— 하위 모듈들을 클러스터(Cluster)로 결합한다.

=>> 상위 모듈에서 데이터의 입출력을 확인하기 위해 더미 모듈인 ‘드라이버’를 작성한다.

=>> 통합된 클러스터 단위로 테스트한다.

=>> 테스트가 완료되면 클러스터는 프로그램의 구조의 상위로 이동하여 결합하고 드라이버는 실제 모듈로 대체된다.
